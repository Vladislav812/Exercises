package Leetcode;

import java.util.Arrays;

public class ValidTriangleNumber {
    static int ops = 0;

    public static void main(String[] args) {
        //int[] nums = {2, 2, 3, 4};
        //int[] nums = {0, 1, 1, 1};
        int[] nums = {548, 198, 555, 924, 481, 726, 810, 950, 272, 119, 478, 992, 20, 266, 752, 736, 720, 500, 384, 62, 858, 149, 126, 207, 544, 858, 145, 968, 533, 483, 78, 522, 779, 809, 66, 787, 767, 503, 317, 2, 802, 693, 248, 667, 255, 613, 574, 474, 53, 565, 755, 562, 360, 194, 85, 754, 686, 1, 989, 447, 438, 265, 621, 854, 286, 748, 174, 492, 940, 198, 733, 208, 164, 658, 711, 546, 840, 460, 5, 535, 538, 1, 908, 237, 426, 924, 977, 29, 378, 115, 105, 359, 341, 792, 32, 289, 486, 149, 968, 620, 310, 888, 754, 80, 843, 684, 191, 822, 826, 392, 353, 660, 326, 167, 16, 866, 153, 140, 111, 488, 198, 776, 612, 26, 580, 549, 797, 353, 400, 125, 702, 455, 99, 516, 320, 211, 709, 725, 527, 305, 425, 964, 487, 580, 208, 948, 581, 770, 513, 557, 720, 229, 767, 397, 137, 257, 3, 148, 815, 984, 218, 650, 219, 521, 886, 299, 871, 698, 559, 544, 904, 761, 245, 414, 739, 442, 422, 443, 185, 450, 639, 872, 713, 644, 264, 919, 961, 314, 51, 960, 130, 914, 810, 298, 420, 337, 187, 418, 368, 964, 342, 254, 435, 221, 390, 586, 469, 872, 722, 10, 667, 356, 948, 598, 557, 203, 71, 33, 503, 805, 620, 668, 197, 646, 635, 107, 536, 155, 256, 695, 648, 518, 842, 687, 195, 982, 87, 922, 407, 269, 764, 722, 436, 765, 715, 585, 864, 443, 848, 289, 33, 523, 75, 74, 609, 577, 241, 780, 417, 506, 462, 716, 70, 565, 69, 628, 966, 36, 101, 194, 829, 498, 358, 636, 360, 1000, 131, 521, 868, 184, 819, 797, 528, 607, 331, 804, 467, 912, 580, 199, 328, 811, 458, 175, 122, 332, 345, 774, 999, 238, 120, 880, 735, 760, 505, 857, 660, 985, 412, 334, 459, 259, 876, 40, 680, 445, 674, 361, 4, 658, 631, 244, 734, 254, 550, 420, 263, 733, 991, 433, 355, 882, 361, 342, 993, 647, 864, 90, 742, 769, 815, 373, 507, 845, 520, 70, 765, 927, 266, 420, 781, 762, 820, 267, 471, 93, 963, 325, 125, 619, 143, 175, 699, 278, 847, 147, 898, 254, 125, 422, 394, 375, 619, 807, 276, 182, 730, 932, 948, 568, 306, 696, 14, 349, 527, 77, 420, 374, 801, 676, 781, 674, 36, 105, 883, 267, 145, 976, 365, 184, 97, 949, 486, 794, 169, 750, 901, 407, 762, 419, 173, 23, 934, 171, 968, 6, 207, 906, 399, 424, 818, 427, 792, 583, 92, 980, 189, 860, 872, 153, 738, 806, 859, 434, 505, 674, 269, 684, 783, 511, 56, 474, 439, 776, 357, 278, 747, 144, 892, 206, 103, 404, 94, 369, 21, 66, 971, 113, 943, 497, 807, 58, 61, 600, 479, 722, 507, 445, 933, 4, 986, 368, 963, 728, 542, 657, 992, 431, 503, 153, 493, 655, 821, 733, 638, 984, 159, 661, 295, 558, 732, 411, 347, 483, 573, 666, 271, 872, 327, 470, 717, 903, 493, 754, 592, 614, 495, 529, 553, 584, 963, 963, 991, 937, 755, 106, 849, 913, 911, 981, 858, 409, 579, 447, 782, 799, 636, 57, 182, 20, 806, 634, 469, 298, 238, 355, 982, 216, 445, 97, 455, 961, 668, 255, 840, 347, 533, 2, 484, 758, 284, 393, 732, 418, 957, 572, 489, 733, 256, 90, 255, 12, 681, 723, 652, 479, 266, 126, 155, 513, 74, 935, 655, 720, 660, 493, 780, 667, 752, 241, 603, 617, 996, 762, 142, 914, 859, 210, 408, 397, 486, 197, 750, 212, 336, 229, 413, 761, 814, 566, 748, 523, 592, 297, 398, 710, 200, 838, 436, 993, 794, 724, 789, 637, 308, 521, 232, 41, 447, 904, 482, 835, 274, 268, 695, 997, 465, 855, 876, 583, 444, 906, 470, 977, 683, 120, 700, 869, 937, 942, 185, 271, 747, 688, 471, 973, 936, 720, 91, 856, 686, 711, 874, 451, 423, 401, 297, 584, 347, 563, 153, 184, 298, 835, 462, 861, 215, 111, 848, 158, 975, 200, 535, 163, 507, 838, 654, 12, 335, 331, 227, 871, 888, 400, 780, 683, 181, 688, 320, 607, 469, 539, 389, 992, 809, 637, 21, 633, 389, 850, 715, 609, 900, 457, 334, 325, 425, 944, 212, 375, 736, 804, 996, 78, 862, 767, 976, 264, 980, 3, 326, 453, 323, 396, 131, 789, 906, 624, 944, 522, 471, 172, 24, 816, 408, 956, 248, 364, 925, 860, 753, 644, 559, 291, 562, 909, 990, 369, 365, 100, 605, 46, 700, 682, 89, 389, 212, 124, 423, 929, 889, 927, 677, 982, 185, 236, 982, 312, 630, 941, 500, 527, 551, 910, 451, 861, 771, 330, 971, 435, 14, 416, 846, 975, 663, 107, 993, 69, 524, 1, 439, 66, 815, 296, 991, 362, 535, 906, 488, 686, 642, 252, 932, 689, 845, 857, 478, 404, 974, 274, 736, 964, 31, 866, 849, 307, 759, 307, 998, 477, 272, 555, 835, 64, 166, 786, 8, 750, 491, 631, 606, 188, 626, 866, 966, 139, 322, 536, 628, 961, 903, 10, 565, 873, 224, 45, 809, 908, 609, 506, 272, 248, 83, 762, 158, 839, 507, 831, 872, 937, 766, 704, 78, 989, 925, 850, 360, 728, 656, 691, 203, 84, 788, 662, 696, 733, 211, 52, 421, 383, 711, 962, 136, 940, 539, 876, 502, 106, 549, 553, 380, 28, 215, 435, 638, 306, 431, 123, 659, 77, 819, 989, 336, 542, 755, 664, 140, 196, 143, 972, 320, 2, 13, 679, 352, 952, 228, 605, 399, 347, 281, 26, 585, 766, 698, 31, 79, 452, 894, 881, 558, 155, 246, 739, 136, 581, 869, 693, 844, 808, 250, 339, 521, 210, 347, 32, 927, 974, 393, 966, 547, 317, 375, 798, 356, 435, 254, 100, 393, 575, 782, 526, 479, 746, 550, 866, 518, 864, 209, 832, 71, 902, 666, 695};
        // int[] nums = {159, 541, 20, 407, 803, 718, 353, 865, 664, 64, 536, 613, 512, 259, 195, 718, 119, 762, 825, 336, 135, 690, 216, 557, 655, 409, 671, 592, 665, 206, 107, 186, 962, 84, 531, 725, 711, 320, 258, 947, 22, 60, 606, 220, 427, 340, 392, 18, 923, 632, 693, 604, 316, 118, 318, 629, 543, 241, 970, 895, 620, 475, 556, 439, 678, 754, 634, 634, 624, 388, 593, 422, 196, 739, 717, 176, 543, 128, 769, 193, 887, 513, 906, 985, 124, 119, 187, 352, 539, 29, 924, 864, 26, 204, 252, 475, 23, 532, 981, 20, 658, 578, 554, 836, 428, 356, 690, 247, 171, 483, 533, 940, 613, 647, 467, 910, 647, 692, 379, 71, 377, 789, 630, 271, 654, 281, 502, 514, 941, 812, 519, 955, 931, 405, 741, 505, 887, 841, 11, 530, 974, 324, 906, 28, 550, 761, 297, 964, 694, 230, 892, 897, 631, 630, 720, 439, 622, 301, 401, 507, 283, 675, 961, 893, 848, 780, 383, 801, 703, 384, 499, 589, 32, 445, 308, 590, 680, 964, 991, 799, 37, 381, 230, 545, 332, 745, 765, 683, 677, 378, 761, 133, 239, 346, 394, 889, 99, 264, 159, 333, 271, 394, 79, 635, 730, 42, 710, 304, 685, 69, 424, 214, 307, 821, 538, 365, 293, 862, 377, 736, 933, 607, 223, 12, 888, 29, 770, 72, 921, 981, 387, 380, 42, 111, 127, 722, 609, 285, 154, 2, 615, 920, 233, 512, 972, 618, 651, 457, 528, 778, 785, 102, 527, 806, 810, 219, 714, 924, 969, 689, 63, 437, 26, 897, 27, 591, 854, 768, 334, 8, 98, 887, 573, 568, 341, 965, 98, 332, 839, 175, 635, 672, 239, 249, 51, 68, 994, 478, 496, 489, 421, 581, 794, 60, 544, 465, 307, 771, 780, 266, 346, 973, 243, 265, 113, 895, 751, 200, 689, 303, 64, 564, 217, 798, 272, 484, 411, 705, 133, 269, 194, 290, 359, 867, 479, 120, 806, 924, 729, 233, 270, 276, 501, 396, 563, 43, 934, 773, 114, 160, 882, 822, 231, 865, 814, 55, 488, 539, 617, 437, 916, 600, 483, 750, 40, 197, 178, 100, 454, 987, 320, 40, 595, 139, 172, 464, 455, 588, 278, 555, 409, 973, 221, 301, 652, 238, 579, 914, 774, 475, 839, 311, 570, 117, 296, 127, 106, 643, 269, 149, 317, 195, 624, 801, 552, 314, 316, 500, 434, 519, 243, 229, 375, 882, 141, 574, 397, 315, 384, 851, 920, 143, 345, 244, 234, 945, 661, 706, 340, 601, 572, 774, 135, 184, 215, 657, 97, 448, 927, 351, 669, 813, 723, 745, 712, 642, 98, 790, 224, 438, 694, 36, 319, 996, 689, 435, 769, 417, 224, 849, 882, 668, 984, 497, 798, 774, 466, 773, 965, 373, 719, 324, 53, 285, 747, 660, 643, 735, 849, 486, 745, 34, 400, 910, 361, 804, 292, 817, 407, 31, 149, 141, 970, 826, 247, 167, 372, 350, 285, 689, 372, 444, 272, 553, 46, 897, 385, 377, 299, 113, 917, 282, 105, 915, 729, 613, 87, 50, 17, 550, 420, 230, 533, 229, 789, 814, 829, 942, 730, 165, 751, 496, 477, 978, 23, 695, 216, 583, 418, 875, 118, 380, 844, 794, 849, 584, 263, 523, 65, 708, 481, 46, 781, 582, 99, 198, 909, 975, 94, 930, 380, 526, 968, 948, 994, 258, 424, 841, 12, 149, 17, 467, 81, 208, 636, 153, 781, 126, 472, 13, 672, 930, 343, 68, 760, 523, 51, 601, 880, 582, 732, 94, 391, 265, 972, 517, 120, 316, 845, 900, 856, 773, 377, 911, 649, 869, 971, 259, 75, 498, 330, 592, 114, 462, 764, 565, 313, 744, 585, 874, 328, 331, 67, 360, 34, 602, 773, 210, 597, 535, 928, 597, 480, 428, 502, 368, 605, 333, 795, 278, 102, 680, 169, 661, 34, 50, 917, 532, 326, 907, 613, 163, 649, 969, 897, 60, 325, 108, 365, 456, 185, 2, 538, 815, 574, 241, 487, 382, 108, 105, 908, 147, 393, 192, 670, 578, 688, 212, 152, 715, 362, 509, 575, 571, 310, 195, 898, 776, 49, 519, 941, 964, 424, 864, 809, 312, 669, 815, 607, 397, 361, 736, 615, 2, 726, 818, 165, 656, 540, 776, 784, 33, 66, 319, 204, 952, 495, 691, 341, 331, 138, 524, 878, 755, 611, 705, 361, 296, 898, 854, 264, 784, 510, 217, 267, 692, 599, 356, 659, 465, 149, 636, 840, 327, 332, 467, 268, 363, 94, 120, 150, 169, 254, 206, 979, 834, 79, 913, 919, 570, 596, 141, 397, 530, 564, 504, 379, 145, 726, 286, 109, 10, 721, 733, 374, 100, 455, 702, 12, 332, 984, 653, 849, 681, 945, 591, 716, 138, 708, 238, 948, 752, 159, 406, 531, 839, 7, 821, 381, 118, 927, 457, 352, 156, 158, 746, 479, 711, 703, 290, 687, 764, 820, 986, 799, 328, 23, 563, 531, 89, 576, 837, 202, 423, 508, 808, 960, 663, 833, 103, 289, 941, 503, 87, 964, 808, 498, 105, 475, 116, 400, 319, 879, 960, 197, 248, 576, 517, 741, 260, 879, 307, 788, 469, 607, 859, 567, 253, 660, 43, 3, 530, 486, 564, 445, 896, 951, 752, 411, 269, 531, 717, 216, 794, 178, 652, 844, 909, 306, 4, 778, 164, 186, 846, 271, 665, 150, 882, 521, 953, 196, 734, 429, 184, 113, 992, 236, 189, 940, 701, 375, 682, 233, 551, 439, 945, 643, 486, 415, 834, 682, 421, 196, 704, 290, 693, 23, 929, 400, 379, 752, 320, 226, 291, 700, 179, 199, 313, 781, 183, 540, 915, 316, 17, 822, 298, 101, 264, 31, 30, 515, 290, 800, 671, 879, 462, 934, 78, 802, 53, 454, 797, 100, 598, 722, 341, 688, 676, 685, 785, 245, 100, 238, 529, 278, 101, 623, 900, 841, 190, 843, 562, 931, 454, 515, 817, 779, 136, 471, 399, 91, 318, 977, 436, 926, 784, 657, 199, 121, 248, 684, 607, 542, 940, 976, 650, 778, 324, 938, 646, 646, 653, 847};
        //int[] nums = {2, 2, 2, 3, 4, 7, 8, 10, 11};
        //int[] nums = {4, 2, 3, 4};
        //int[] nums = {2, 2, 3, 4};
        //int[] nums = {3, 3, 3, 3, 6, 6, 8};
        // int[] nums = {3, 3, 3, 3, 6, 6, 8, 10, 10, 10, 10, 15, 15, 16};
        // int[] nums = {16, 70, 16, 36, 17, 39, 44, 72, 25, 88, 18, 22, 20, 84, 18, 66, 71, 74, 87, 59, 48, 91, 52, 15, 92, 29, 85, 21, 10, 34, 86, 68, 10, 27, 3, 42, 49, 48, 18, 15, 6, 39, 61, 28, 19, 52, 60, 8, 37, 32, 71, 82, 54, 38, 47, 33, 10, 64, 52, 71, 39, 63, 64, 79, 86, 47, 16, 72, 55, 17, 35, 88, 74, 93, 10, 59, 3, 64, 95, 91, 61, 28, 63, 23, 49, 6, 24, 47, 41, 88, 96, 23, 90, 53, 84, 3, 35, 23, 3, 17};
        System.out.println("triangles number: " + triangleNumber(nums));
        System.out.println("n^3 = " + nums.length * nums.length * nums.length);
        System.out.println("n^2 = " + nums.length * nums.length);
        System.out.println("nums.length = " + nums.length);
        System.out.println("operations number: " + ops);
        System.out.println(Math.log(nums.length));

    }

    public static int triangleNumber(int[] nums) {
        Arrays.sort(nums);
        //System.out.println(Arrays.toString(nums));
        int count = 0;
        for (int i = 0; i < nums.length - 2; i++) {
            for (int j = i + 1; j < nums.length - 1; j++) {
                //System.out.println();
                ops++;
                int k = binSearch(nums, j + 1, nums.length - 1, nums[i] + nums[j]);
                if (k == -1) {
                    continue;
                }
                //System.out.println("k = " + k + "  i = " + i + " j = " + j);
                count += k - (j + 1);
                // System.out.println("counts = " + count);

            }
        }
        //System.out.println("operations number: " + ops);
        return count;
    }

    public static int binSearch(int[] ar, int low, int high, int key) {
        ops++;
        if (key > ar[high]) {
            return high + 1;
        }
        int mid = (low + high) / 2;
        if (low > high || low < 0 || high > ar.length - 1) {
            return -1;
        }
        //System.out.println("ar[mid] = " + ar[mid] + "|" + "  key = " + key + "   ar[mid - 1] = " + ar[mid - 1]);
        if (key == ar[mid]) {
            while (mid >= low && ar[mid] == key) {
                mid--;
            }
            return ++mid;
        }

        if (key < ar[mid]) {
            if (key > ar[mid - 1]) {
                return mid;
            }
            return binSearch(ar, low, mid - 1, key);
        }
        if (key > ar[mid]) {
            return binSearch(ar, mid + 1, high, key);
        }

        return -1;
    }

}
